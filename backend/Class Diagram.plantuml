@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class ApiResponse {
  + ApiResponse(): 
  + ApiResponse(Boolean, String): 
  + ApiResponse(Boolean, String, HttpStatus): 
  - status: HttpStatus
  - message: String
  - success: Boolean
   message: String
   success: Boolean
   status: HttpStatus
}
class ApplicationConfig {
  + ApplicationConfig(UserRepository): 
  + authenticationProvider(UserDetailsService, PasswordEncoder): AuthenticationProvider
  + passwordEncoder(): PasswordEncoder
  + authenticationManager(AuthenticationConfiguration): AuthenticationManager
  + userDetailsService(): UserDetailsService
}
class AuthenticationController {
  + AuthenticationController(AuthenticationService): 
  + register(RegisterRequest): ResponseEntity<?>
  + login(AuthenticationRequest): ResponseEntity<AuthenticationResponse>
}
class AuthenticationRequest {
  + AuthenticationRequest(String, String): 
  - username: String
  - password: String
   password: String
   username: String
}
class AuthenticationResponse {
  + AuthenticationResponse(String): 
  - accessToken: String
   accessToken: String
}
interface AuthenticationService << interface >> {
  + register(RegisterRequest): ResponseEntity<?>
  + login(AuthenticationRequest): ResponseEntity<AuthenticationResponse>
}
class AuthenticationServiceImpl {
  + AuthenticationServiceImpl(UserRepository, PasswordEncoder, JwtService, AuthenticationManager): 
  + register(RegisterRequest): ResponseEntity<?>
  + login(AuthenticationRequest): ResponseEntity<AuthenticationResponse>
}
class BadRequestException {
  + BadRequestException(ApiResponse): 
  + BadRequestException(String, Throwable): 
  + BadRequestException(String): 
  - apiResponse: ApiResponse
   apiResponse: ApiResponse
}
class Comment {
  + Comment(): 
  + Comment(User, Task, String): 
  - id: Integer
  - task: Task
  - user: User
  - comment: String
  - createdAt: Date
  # onCreate(): void
   createdAt: Date
   task: Task
   comment: String
   id: Integer
   user: User
}
class CommentController {
  + CommentController(CommentService): 
  + deleteComment(Integer): ResponseEntity<ApiResponse>
  + addComment(CommentRequest): ResponseEntity<CommentDTO>
  + getAllComments(Integer, Integer): ResponseEntity<PagedResponse<CommentDTO>>
}
class CommentDTO {
  + CommentDTO(): 
  + CommentDTO(Integer, String, Date): 
  - id: Integer
  - comment: String
  - user: UserDTO
  - createdAt: Date
   createdAt: Date
   comment: String
   user: UserDTO
   id: Integer
}
class CommentDtoFactory {
  - CommentDtoFactory(): 
  - instance: CommentDtoFactory
  + createCommentDto(Integer, String, Date): CommentDTO
   instance: CommentDtoFactory
}
enum CommentFactory << enumeration >> {
  + CommentFactory(): 
  + valueOf(String): CommentFactory
  + createComment(User, Task, String): Comment
  + values(): CommentFactory[]
}
interface CommentRepository << interface >> {
  + findByTaskIdAndUserId(Integer, Integer): List<Comment>
}
class CommentRequest {
  + CommentRequest(): 
  + CommentRequest(Integer, Integer, String): 
  - comment: String
  - taskId: Integer
  - userId: Integer
   comment: String
   userId: Integer
   taskId: Integer
}
interface CommentService << interface >> {
  + addComment(CommentRequest): ResponseEntity<CommentDTO>
  + getAllComments(int, int): ResponseEntity<PagedResponse<CommentDTO>>
  + deleteComment(Integer): ResponseEntity<ApiResponse>
}
class CommentServiceImpl {
  + CommentServiceImpl(CommentRepository, UserRepository, TaskRepository): 
  + addComment(CommentRequest): ResponseEntity<CommentDTO>
  + getAllComments(int, int): ResponseEntity<PagedResponse<CommentDTO>>
  + deleteComment(Integer): ResponseEntity<ApiResponse>
  - mapToCommentDTO(Comment): CommentDTO
}
class CorsConfig {
  + CorsConfig(): 
  + corsConfigurationSource(): CorsConfigurationSource
}
class DelegatedAuthEntryPoint {
  + DelegatedAuthEntryPoint(HandlerExceptionResolver): 
  + commence(HttpServletRequest, HttpServletResponse, AuthenticationException): void
}
class JwtAuthenticationFilter {
  + JwtAuthenticationFilter(JwtService, UserDetailsService): 
  # doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain): void
}
class JwtService {
  + JwtService(): 
  + generateToken(Map<String, Object>, UserDetails): String
  - isTokenExpired(String): boolean
  + getSubject(String): String
  - buildToken(Map<String, Object>, UserDetails, long): String
  - extractAllClaims(String): Claims
  - extractExpiration(String): Date
  + generateToken(UserDetails): String
  + isTokenValid(String, UserDetails): boolean
  + extractClaim(String, Function<Claims, T>): T
   signInKey: Key
}
class LastestCommentComparator {
  + LastestCommentComparator(): 
  + compare(Comment, Comment): int
}
class LogoutService {
  + LogoutService(): 
  + logout(HttpServletRequest, HttpServletResponse, Authentication): void
}
class OpenApiConfig {
  + OpenApiConfig(): 
}
class PagedResponse<T> {
  + PagedResponse(): 
  + PagedResponse(List<T>, int, int, long, int, boolean): 
  - data: List<T>
  - page: int
  - size: int
  - totalPages: int
  - totalElements: long
  - last: boolean
   size: int
   totalElements: long
   last: boolean
   page: int
   data: List<T>
   totalPages: int
}
class Project {
  + Project(String, String): 
  + Project(): 
  - description: String
  - createdAt: Date
  - name: String
  - id: Integer
  - tasks: List<Task>
  + toString(): String
  + equals(Object): boolean
  # onCreate(): void
   createdAt: Date
   name: String
   description: String
   tasks: List<Task>
   id: Integer
}
class ProjectController {
  + ProjectController(ProjectService, UserProjectServiceImpl): 
  + createProject(ProjectRequest): ResponseEntity<ProjectDTO>
  + exportProject(): ResponseEntity<List<ProjectDTO>>
  + importProject(File): ResponseEntity<List<ProjectDTO>>
  + getProject(Integer): ResponseEntity<ProjectDTO>
  + deleteProject(Integer): ResponseEntity<ApiResponse>
  + getAllProjects(Integer, Integer): ResponseEntity<PagedResponse<ProjectDTO>>
  + updateProject(ProjectRequest): ResponseEntity<ProjectDTO>
  + getAllUsersByProject(Integer): ResponseEntity<List<UserDTO>>
  + assignProject(ProjectRequest): ResponseEntity<ApiResponse>
}
class ProjectDTO {
  + ProjectDTO(Integer, String, String): 
  + ProjectDTO(): 
  - name: String
  - description: String
  - id: Integer
   name: String
   description: String
   id: Integer
}
enum ProjectDtoFactory << enumeration >> {
  + ProjectDtoFactory(): 
  + values(): ProjectDtoFactory[]
  + valueOf(String): ProjectDtoFactory
  + createProjectDto(Integer, String, String): ProjectDTO
}
class ProjectFactory {
  - ProjectFactory(): 
  - instance: ProjectFactory
  + createProject(String, String): Project
   instance: ProjectFactory
}
interface ProjectRepository << interface >>
class ProjectRequest {
  + ProjectRequest(): 
  - assigneeId: Integer
   assigneeId: Integer
}
interface ProjectService << interface >> {
  + deleteProject(Integer): ResponseEntity<ApiResponse>
  + getProject(Integer): ResponseEntity<ProjectDTO>
  + exportProject(): ResponseEntity<List<ProjectDTO>>
  + createProject(ProjectRequest): ResponseEntity<ProjectDTO>
  + getAllProjects(int, int): ResponseEntity<PagedResponse<ProjectDTO>>
  + importProject(File): ResponseEntity<List<ProjectDTO>>
  + updateProject(ProjectRequest): ResponseEntity<ProjectDTO>
}
class ProjectServiceImpl {
  + ProjectServiceImpl(ProjectRepository): 
  + getAllProjects(int, int): ResponseEntity<PagedResponse<ProjectDTO>>
  + importProject(File): ResponseEntity<List<ProjectDTO>>
  + deleteProject(Integer): ResponseEntity<ApiResponse>
  + getProject(Integer): ResponseEntity<ProjectDTO>
  + createProject(ProjectRequest): ResponseEntity<ProjectDTO>
  + updateProject(ProjectRequest): ResponseEntity<ProjectDTO>
  + exportProject(): ResponseEntity<List<ProjectDTO>>
}
class RegisterRequest {
  + RegisterRequest(String, String, String, String, Role): 
  - role: Role
  - password: String
  - username: String
  - firstname: String
  - lastname: String
   firstname: String
   password: String
   role: Role
   username: String
   lastname: String
}
class ResourceNotFoundException {
  + ResourceNotFoundException(String, String, Object): 
  - resourceName: String
  - fieldName: String
  - apiResponse: ApiResponse
  - fieldValue: Object
  - setApiResponse(): void
   fieldName: String
   apiResponse: ApiResponse
   fieldValue: Object
   resourceName: String
}
class RestControllerExceptionHandler {
  + RestControllerExceptionHandler(): 
  + resolveException(UnauthorizedException): ResponseEntity<ApiResponse>
  + resolveException(ResourceNotFoundException): ResponseEntity<ApiResponse>
  + resolveException(BadRequestException): ResponseEntity<ApiResponse>
}
enum Role << enumeration >> {
  + Role(): 
  + valueOf(String): Role
  + values(): Role[]
}
class SecurityFilterChainConfig {
  + SecurityFilterChainConfig(AuthenticationProvider, JwtAuthenticationFilter, AuthenticationEntryPoint, LogoutHandler): 
  + securityFilterChain(HttpSecurity): SecurityFilterChain
}
class Task {
  + Task(): 
  + Task(String, String, Date, TaskPriority, TaskStatus, Project): 
  - name: String
  - priority: TaskPriority
  - createdAt: Date
  - description: String
  + assignee: User
  - id: Integer
  - status: TaskStatus
  - deadline: Date
  - comments: List<Comment>
  - project: Project
  + toString(): String
  + compareTo(Task): int
  # onCreate(): void
  + setAssignee(): void
   createdAt: Date
   name: String
   description: String
   deadline: Date
   project: Project
   comments: List<Comment>
   priority: TaskPriority
   assignee: User
   id: Integer
   status: TaskStatus
}
class TaskController {
  + TaskController(TaskService): 
  + getAllTasks(Integer, Integer, Integer, Integer, TaskPriority, TaskStatus): ResponseEntity<PagedResponse<TaskDTO>>
  + assignTask(TaskRequest): ResponseEntity<ApiResponse>
  + changeTaskPriority(TaskRequest): ResponseEntity<ApiResponse>
  + deleteTask(Integer): ResponseEntity<ApiResponse>
  + createTask(TaskRequest): ResponseEntity<TaskDTO>
  + changeTaskStatus(TaskRequest): ResponseEntity<ApiResponse>
  + getTaskDetail(Integer): ResponseEntity<TaskDTO>
  + updateTask(TaskRequest): ResponseEntity<TaskDTO>
}
class TaskDTO {
  + TaskDTO(Integer, String, String, Date, TaskPriority, TaskStatus): 
  + TaskDTO(): 
  - name: String
  - assignee: UserDTO
  - id: Integer
  - priority: TaskPriority
  - comments: List<CommentDTO>
  - status: TaskStatus
  - deadline: Date
  - description: String
   name: String
   description: String
   deadline: Date
   comments: List<CommentDTO>
   assignee: UserDTO
   priority: TaskPriority
   id: Integer
   status: TaskStatus
}
class TaskDtoFactory {
  - TaskDtoFactory(): 
  - instance: TaskDtoFactory
  + createTaskDto(Integer, String, String, Date, TaskPriority, TaskStatus): TaskDTO
   instance: TaskDtoFactory
}
enum TaskPriority << enumeration >> {
  - TaskPriority(int): 
  - priority: int
  + values(): TaskPriority[]
  + valueOf(String): TaskPriority
   priority: int
}
interface TaskRepository << interface >> {
  + findByAssigneeId(Integer, Pageable): Page<Task>
  + findByProjectId(Integer, Pageable): Page<Task>
  + findByAssigneeIdAndProjectId(Integer, Integer, Pageable): Page<Task>
}
class TaskRequest {
  + TaskRequest(): 
  - projectId: Integer
  - assigneeId: Integer
   projectId: Integer
   assigneeId: Integer
}
interface TaskService << interface >> {
  + assignTask(TaskRequest): ResponseEntity<ApiResponse>
  + updateTask(TaskRequest): ResponseEntity<TaskDTO>
  + changeTaskPriority(TaskRequest): ResponseEntity<ApiResponse>
  + changeTaskStatus(TaskRequest): ResponseEntity<ApiResponse>
  + getTaskDetail(Integer): ResponseEntity<TaskDTO>
  + deleteTask(Integer): ResponseEntity<ApiResponse>
  + getAllTasks(int, int, Integer, Integer, TaskPriority, TaskStatus): ResponseEntity<PagedResponse<TaskDTO>>
  + createTask(TaskRequest): ResponseEntity<TaskDTO>
}
class TaskServiceImpl {
  + TaskServiceImpl(TaskRepository, UserRepository, ProjectRepository): 
  + updateTask(TaskRequest): ResponseEntity<TaskDTO>
  + createTask(TaskRequest): ResponseEntity<TaskDTO>
  + changeTaskPriority(TaskRequest): ResponseEntity<ApiResponse>
  - mapToCommentDTO(Comment): CommentDTO
  - mapToTaskDTO(Task): TaskDTO
  + assignTask(TaskRequest): ResponseEntity<ApiResponse>
  + changeTaskStatus(TaskRequest): ResponseEntity<ApiResponse>
  + getAllTasks(int, int, Integer, Integer, TaskPriority, TaskStatus): ResponseEntity<PagedResponse<TaskDTO>>
  + getTaskDetail(Integer): ResponseEntity<TaskDTO>
  + deleteTask(Integer): ResponseEntity<ApiResponse>
}
class TaskSphereApplication {
  + TaskSphereApplication(): 
  + main(String[]): void
}
enum TaskStatus << enumeration >> {
  - TaskStatus(String): 
  - description: String
  + values(): TaskStatus[]
  + valueOf(String): TaskStatus
   description: String
}
class Token {
  + Token(): 
  + Token(String, String, boolean, boolean, User): 
  + id: Integer
  + expired: boolean
  + token: String
  + user: User
  + tokenType: String
  + revoked: boolean
  + equals(Object): boolean
   tokenType: String
   expired: boolean
   token: String
   id: Integer
   revoked: boolean
   user: User
}
class UnauthorizedException {
  + UnauthorizedException(String): 
  + UnauthorizedException(String, Throwable): 
  - apiResponse: ApiResponse
  - message: String
  - setApiResponse(): void
   apiResponse: ApiResponse
   message: String
}
class User {
  + User(): 
  + User(String, String, String, String, Role): 
  - password: String
  - username: String
  - lastname: String
  - role: Role
  - id: Integer
  - tasks: List<Task>
  - firstname: String
  - comments: List<Comment>
  + toString(): String
  + equals(Object): boolean
   role: Role
   comments: List<Comment>
   credentialsNonExpired: boolean
   authorities: Collection<GrantedAuthority>
   accountNonExpired: boolean
   id: Integer
   password: String
   enabled: boolean
   tasks: List<Task>
   lastname: String
   accountNonLocked: boolean
   firstname: String
   username: String
}
class UserController {
  + UserController(UserService): 
  + getUserProfile(Integer): ResponseEntity<UserDTO>
  + changeUserRole(UserRequest): ResponseEntity<ApiResponse>
  + updateUserProfile(UserRequest): ResponseEntity<ApiResponse>
  + deleteUser(Integer): ResponseEntity<ApiResponse>
}
class UserDTO {
  + UserDTO(Integer, String, String, String, Role): 
  + UserDTO(): 
  - firstname: String
  - lastname: String
  - id: Integer
  - username: String
  - role: Role
   firstname: String
   role: Role
   username: String
   id: Integer
   lastname: String
}
class UserDtoFactory {
  - UserDtoFactory(): 
  - instance: UserDtoFactory
  + createUserDTO(Integer, String, String, String, Role): UserDTO
   instance: UserDtoFactory
}
class UserProject {
  + UserProject(): 
  + UserProject(User, Project): 
  - user: User
  - project: Project
  + toString(): String
   project: Project
   user: User
}
class UserProjectFactory {
  - UserProjectFactory(): 
  - instance: UserProjectFactory
  + createUserProject(User, Project): UserProject
   instance: UserProjectFactory
}
class UserProjectId {
  + UserProjectId(): 
  + UserProjectId(Integer, Integer): 
  - projectId: Integer
  - userId: Integer
  + toString(): String
   userId: Integer
   projectId: Integer
}
interface UserProjectRepository << interface >> {
  + findByProjectId(Integer): List<UserProject>
}
interface UserProjectService << interface >> {
  + getAllUsersByProject(Integer): ResponseEntity<List<UserDTO>>
  + assignProject(ProjectRequest): ResponseEntity<ApiResponse>
}
class UserProjectServiceImpl {
  + UserProjectServiceImpl(UserProjectRepository, UserRepository, ProjectRepository): 
  + getAllUsersByProject(Integer): ResponseEntity<List<UserDTO>>
  + assignProject(ProjectRequest): ResponseEntity<ApiResponse>
}
interface UserRepository << interface >> {
  + existsByUsername(String): Boolean
  + findByUsername(String): Optional<User>
}
class UserRequest {
  + UserRequest(): 
}
interface UserService << interface >> {
  + deleteUser(Integer): ResponseEntity<ApiResponse>
  + getUserProfile(Integer): ResponseEntity<UserDTO>
  + changeUserRole(UserRequest): ResponseEntity<ApiResponse>
  + updateUserProfile(UserRequest): ResponseEntity<ApiResponse>
}
class UserServiceImpl {
  + UserServiceImpl(UserRepository): 
  + changeUserRole(UserRequest): ResponseEntity<ApiResponse>
  + getUserProfile(Integer): ResponseEntity<UserDTO>
  + updateUserProfile(UserRequest): ResponseEntity<ApiResponse>
  + deleteUser(Integer): ResponseEntity<ApiResponse>
}

ApplicationConfig              "1" *-[#595959,plain]-> "userRepository\n1" UserRepository                 
AuthenticationController       "1" *-[#595959,plain]-> "authenticationService\n1" AuthenticationService          
AuthenticationServiceImpl       -[#595959,dashed]->  ApiResponse                    : "«create»"
AuthenticationServiceImpl       -[#595959,dashed]->  AuthenticationResponse         : "«create»"
AuthenticationServiceImpl       -[#008200,dashed]-^  AuthenticationService          
AuthenticationServiceImpl      "1" *-[#595959,plain]-> "jwtService\n1" JwtService                     
AuthenticationServiceImpl       -[#595959,dashed]->  ResourceNotFoundException      : "«create»"
AuthenticationServiceImpl       -[#595959,dashed]->  User                           : "«create»"
AuthenticationServiceImpl      "1" *-[#595959,plain]-> "userRepository\n1" UserRepository                 
BadRequestException            "1" *-[#595959,plain]-> "apiResponse\n1" ApiResponse                    
Comment                        "1" *-[#595959,plain]-> "task\n1" Task                           
Comment                        "1" *-[#595959,plain]-> "user\n1" User                           
CommentController              "1" *-[#595959,plain]-> "commentService\n1" CommentService                 
CommentDTO                     "1" *-[#595959,plain]-> "user\n1" UserDTO                        
CommentDtoFactory               -[#595959,dashed]->  CommentDTO                     : "«create»"
CommentFactory                  -[#595959,dashed]->  Comment                        : "«create»"
CommentServiceImpl              -[#595959,dashed]->  ApiResponse                    : "«create»"
CommentServiceImpl              -[#595959,dashed]->  CommentDTO                     : "«create»"
CommentServiceImpl             "1" *-[#595959,plain]-> "commentRepository\n1" CommentRepository              
CommentServiceImpl              -[#008200,dashed]-^  CommentService                 
CommentServiceImpl              -[#595959,dashed]->  LastestCommentComparator       : "«create»"
CommentServiceImpl              -[#595959,dashed]->  PagedResponse                  : "«create»"
CommentServiceImpl              -[#595959,dashed]->  ResourceNotFoundException      : "«create»"
CommentServiceImpl             "1" *-[#595959,plain]-> "taskRepository\n1" TaskRepository                 
CommentServiceImpl              -[#595959,dashed]->  UserDTO                        : "«create»"
CommentServiceImpl             "1" *-[#595959,plain]-> "userRepository\n1" UserRepository                 
JwtAuthenticationFilter        "1" *-[#595959,plain]-> "jwtService\n1" JwtService                     
LastestCommentComparator        +-[#820000,plain]-  Comment                        
Project                        "1" *-[#595959,plain]-> "tasks\n*" Task                           
ProjectController              "1" *-[#595959,plain]-> "projectService\n1" ProjectService                 
ProjectController              "1" *-[#595959,plain]-> "userProjectService\n1" UserProjectService             
ProjectDtoFactory               -[#595959,dashed]->  ProjectDTO                     : "«create»"
ProjectFactory                  -[#595959,dashed]->  Project                        : "«create»"
ProjectRequest                  -[#000082,plain]-^  ProjectDTO                     
ProjectServiceImpl              -[#595959,dashed]->  ApiResponse                    : "«create»"
ProjectServiceImpl              -[#595959,dashed]->  PagedResponse                  : "«create»"
ProjectServiceImpl              -[#595959,dashed]->  ProjectDTO                     : "«create»"
ProjectServiceImpl             "1" *-[#595959,plain]-> "projectRepository\n1" ProjectRepository              
ProjectServiceImpl              -[#008200,dashed]-^  ProjectService                 
ProjectServiceImpl              -[#595959,dashed]->  ResourceNotFoundException      : "«create»"
RegisterRequest                "1" *-[#595959,plain]-> "role\n1" Role                           
ResourceNotFoundException      "1" *-[#595959,plain]-> "apiResponse\n1" ApiResponse                    
ResourceNotFoundException       -[#595959,dashed]->  ApiResponse                    : "«create»"
SecurityFilterChainConfig      "1" *-[#595959,plain]-> "jwtAuthenticationFilter\n1" JwtAuthenticationFilter        
Task                           "1" *-[#595959,plain]-> "comments\n*" Comment                        
Task                           "1" *-[#595959,plain]-> "project\n1" Project                        
Task                           "1" *-[#595959,plain]-> "priority\n1" TaskPriority                   
Task                           "1" *-[#595959,plain]-> "status\n1" TaskStatus                     
Task                           "1" *-[#595959,plain]-> "assignee\n1" User                           
TaskController                 "1" *-[#595959,plain]-> "taskService\n1" TaskService                    
TaskDTO                        "1" *-[#595959,plain]-> "comments\n*" CommentDTO                     
TaskDTO                        "1" *-[#595959,plain]-> "priority\n1" TaskPriority                   
TaskDTO                        "1" *-[#595959,plain]-> "status\n1" TaskStatus                     
TaskDTO                        "1" *-[#595959,plain]-> "assignee\n1" UserDTO                        
TaskDtoFactory                  -[#595959,dashed]->  TaskDTO                        : "«create»"
TaskRequest                     -[#000082,plain]-^  TaskDTO                        
TaskServiceImpl                 -[#595959,dashed]->  ApiResponse                    : "«create»"
TaskServiceImpl                 -[#595959,dashed]->  CommentDTO                     : "«create»"
TaskServiceImpl                 -[#595959,dashed]->  PagedResponse                  : "«create»"
TaskServiceImpl                 -[#595959,dashed]->  ResourceNotFoundException      : "«create»"
TaskServiceImpl                 -[#595959,dashed]->  Task                           : "«create»"
TaskServiceImpl                "1" *-[#595959,plain]-> "taskRepository\n1" TaskRepository                 
TaskServiceImpl                 -[#008200,dashed]-^  TaskService                    
TaskServiceImpl                 -[#595959,dashed]->  UserDTO                        : "«create»"
TaskServiceImpl                "1" *-[#595959,plain]-> "userRepository\n1" UserRepository                 
Token                          "1" *-[#595959,plain]-> "user\n1" User                           
UnauthorizedException           -[#595959,dashed]->  ApiResponse                    : "«create»"
UnauthorizedException          "1" *-[#595959,plain]-> "apiResponse\n1" ApiResponse                    
User                           "1" *-[#595959,plain]-> "comments\n*" Comment                        
User                           "1" *-[#595959,plain]-> "role\n1" Role                           
User                           "1" *-[#595959,plain]-> "tasks\n*" Task                           
UserController                 "1" *-[#595959,plain]-> "userService\n1" UserService                    
UserDTO                        "1" *-[#595959,plain]-> "role\n1" Role                           
UserDtoFactory                  -[#595959,dashed]->  UserDTO                        : "«create»"
UserProject                    "1" *-[#595959,plain]-> "project\n1" Project                        
UserProject                    "1" *-[#595959,plain]-> "user\n1" User                           
UserProject                     -[#595959,dashed]->  UserProjectId                  : "«create»"
UserProject                    "1" *-[#595959,plain]-> "id\n1" UserProjectId                  
UserProjectFactory              -[#595959,dashed]->  UserProject                    : "«create»"
UserProjectId                   +-[#820000,plain]-  UserProject                    
UserProjectServiceImpl          -[#595959,dashed]->  ApiResponse                    : "«create»"
UserProjectServiceImpl         "1" *-[#595959,plain]-> "projectRepository\n1" ProjectRepository              
UserProjectServiceImpl          -[#595959,dashed]->  ResourceNotFoundException      : "«create»"
UserProjectServiceImpl          -[#595959,dashed]->  UserDTO                        : "«create»"
UserProjectServiceImpl         "1" *-[#595959,plain]-> "userProjectRepository\n1" UserProjectRepository          
UserProjectServiceImpl          -[#008200,dashed]-^  UserProjectService             
UserProjectServiceImpl         "1" *-[#595959,plain]-> "userRepository\n1" UserRepository                 
UserRequest                     -[#000082,plain]-^  UserDTO                        
UserServiceImpl                 -[#595959,dashed]->  ApiResponse                    : "«create»"
UserServiceImpl                 -[#595959,dashed]->  ResourceNotFoundException      : "«create»"
UserServiceImpl                "1" *-[#595959,plain]-> "userRepository\n1" UserRepository                 
UserServiceImpl                 -[#008200,dashed]-^  UserService                    
@enduml
